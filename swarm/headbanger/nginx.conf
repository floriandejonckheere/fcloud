user  abc;
worker_processes 4;
daemon off;

pid /run/nginx.pid;

include /etc/nginx/modules/*.conf;

events {
    worker_connections  1024;
}

http {
  include       /etc/nginx/mime.types;
  default_type  application/octet-stream;

  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

  access_log /var/log/nginx/access.log main;
  error_log  /var/log/nginx/error.log warn;

  sendfile        on;
  #tcp_nopush     on;

  index index.html index.htm index.php;

  keepalive_timeout  65;

  #gzip  on;

  # don't send the nginx version number in error pages and Server header
  server_tokens off;

  # config to don't allow the browser to render the page inside an frame or iframe
  # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
  # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
  # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
  add_header        X-Frame-Options        SAMEORIGIN;

  # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
  # to disable content-type sniffing on some browsers.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
  # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
  # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
  add_header        X-Content-Type-Options        nosniff;

  # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
  # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
  # this particular website if it was disabled by the user.
  # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
  add_header X-XSS-Protection "1; mode=block";

  # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
  # you can tell the browser that it can only download content from the domains you explicitly allow
  # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
  # https://www.owasp.org/index.php/Content_Security_Policy
  # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
  # directives for css and js(if you have inline css or js, you will need to keep it too).
  # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
  add_header Content-Security-Policy "default-src 'self'; img-src blob: data: *; media-src *; font-src 'self' data: https://fonts.gstatic.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; child-src *; frame-src *; script-src 'self' 'unsafe-eval' 'unsafe-inline' https://www.googletagmanager.com https://www.google-analytics.com https://cdnjs.cloudflare.com https://code.iconify.design https://api.iconify.design; connect-src 'self' $server_name";

  # config to enable HSTS(HTTP Strict Transport Security) https://developer.mozilla.org/en-US/docs/Security/HTTP_Strict_Transport_Security
  # to avoid ssl stripping https://en.wikipedia.org/wiki/SSL_stripping#SSL_stripping
  add_header Strict-Transport-Security "max-age=63072000; includeSubdomains;" always;

  lua_load_resty_core off;

  limit_req_zone $binary_remote_addr zone=ma_limit_req:10m rate=2r/s;

  proxy_cache_path /cache levels=1:2 keys_zone=metal_archives:10m max_size=10g
                   inactive=6M use_temp_path=off;

  # ma.cache.headbang.re
  server {
    server_name ma.cache.headbang.re;

    listen 80;
    listen [::]:80;

    location / {
      proxy_pass          https://www.metal-archives.com;

      sub_filter          https://www.metal-archives.com https://ma.cache.headbang.re;
      sub_filter_once     off;

      proxy_redirect      https://www.metal-archives.com https://ma.cache.headbang.re;
      proxy_set_header    Host www.metal-archives.com;
      proxy_set_header    X-Forwarded-Host $host;
      proxy_set_header    X-Forwarded-Server $host;
      proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header    X-Real-IP  $remote_addr;

      proxy_ssl_certificate               /config/client.pem;
      proxy_ssl_certificate_key           /config/client.key;
      proxy_ssl_server_name on;
      proxy_ssl_session_reuse on;

      proxy_ignore_headers  X-Accel-Expires;
      proxy_ignore_headers  Expires;
      proxy_ignore_headers  Cache-Control;
      proxy_ignore_headers  Set-Cookie;

      proxy_hide_header     Set-Cookie;
      proxy_hide_header     Pragma;

      # Limit HTTP requests
      # limit_req         zone=ma_limit_req burst=5;
      # limit_req_status  429;
      # limit_conn_status 429;

      # Cache responses
      proxy_cache       metal_archives;
      proxy_cache_valid 200 301 302 30d;
      proxy_cache_valid 404 7d;
      expires           30d;

      proxy_cache_use_stale               error timeout updating http_500 http_502 http_503 http_504;
      proxy_cache_background_update       on;
      proxy_cache_lock                    on;
      proxy_cache_bypass                  $cookie_nocache $arg_nocache;

      add_header X-Cache-Status           $upstream_cache_status;
    }
  }
}
